//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFBook
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class jnolanEntities6 : DbContext
    {
        public jnolanEntities6()
            : base("name=jnolanEntities6")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ADMINISTRATOR> ADMINISTRATORs { get; set; }
        public DbSet<BILLING_ADDRESS> BILLING_ADDRESS { get; set; }
        public DbSet<BOOK> BOOKS { get; set; }
        public DbSet<CATEGORY> CATEGORies { get; set; }
        public DbSet<CCARD> CCARDs { get; set; }
        public DbSet<CONTACT> CONTACTs { get; set; }
        public DbSet<CUSTOMER> CUSTOMERs { get; set; }
        public DbSet<CUSTOMER_CCARD> CUSTOMER_CCARD { get; set; }
        public DbSet<CUSTOMER1> CUSTOMERS1 { get; set; }
        public DbSet<INVOICE> INVOICEs { get; set; }
        public DbSet<ORDER_DETAIL> ORDER_DETAIL { get; set; }
        public DbSet<ORDERR> ORDERRs { get; set; }
        public DbSet<PUB_ADDRESS> PUB_ADDRESS { get; set; }
        public DbSet<PUBLISHER> PUBLISHERs { get; set; }
        public DbSet<SERVICE> SERVICEs { get; set; }
        public DbSet<SHIPPING_ADDRESS> SHIPPING_ADDRESS { get; set; }
        public DbSet<SHOPPING_CART> SHOPPING_CART { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<SystemUser> SystemUsers { get; set; }
        public DbSet<AllCustomerHistory> AllCustomerHistories { get; set; }
        public DbSet<CheckoutButton> CheckoutButtons { get; set; }
        public DbSet<CustomerHistory> CustomerHistories { get; set; }
        public DbSet<CustomersView> CustomersViews { get; set; }
        public DbSet<InventoryListView> InventoryListViews { get; set; }
        public DbSet<Multicard> Multicards { get; set; }
    
        public virtual int CustomerReport(string lName, string fName, Nullable<decimal> pword)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerReport", lNameParameter, fNameParameter, pwordParameter);
        }
    
        public virtual int DeleteShopping_Cart(Nullable<int> cart_ID, Nullable<int> bookID)
        {
            var cart_IDParameter = cart_ID.HasValue ?
                new ObjectParameter("Cart_ID", cart_ID) :
                new ObjectParameter("Cart_ID", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteShopping_Cart", cart_IDParameter, bookIDParameter);
        }
    
        public virtual int InsertAdmin(string newLName, string newFName, Nullable<decimal> newPword)
        {
            var newLNameParameter = newLName != null ?
                new ObjectParameter("NewLName", newLName) :
                new ObjectParameter("NewLName", typeof(string));
    
            var newFNameParameter = newFName != null ?
                new ObjectParameter("NewFName", newFName) :
                new ObjectParameter("NewFName", typeof(string));
    
            var newPwordParameter = newPword.HasValue ?
                new ObjectParameter("NewPword", newPword) :
                new ObjectParameter("NewPword", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAdmin", newLNameParameter, newFNameParameter, newPwordParameter);
        }
    
        public virtual ObjectResult<string> InsertBillingAddress(string email, string pword, string newStreet, string newCity, string newState, string newCountry, Nullable<decimal> newZip)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pwordParameter = pword != null ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(string));
    
            var newStreetParameter = newStreet != null ?
                new ObjectParameter("NewStreet", newStreet) :
                new ObjectParameter("NewStreet", typeof(string));
    
            var newCityParameter = newCity != null ?
                new ObjectParameter("NewCity", newCity) :
                new ObjectParameter("NewCity", typeof(string));
    
            var newStateParameter = newState != null ?
                new ObjectParameter("NewState", newState) :
                new ObjectParameter("NewState", typeof(string));
    
            var newCountryParameter = newCountry != null ?
                new ObjectParameter("NewCountry", newCountry) :
                new ObjectParameter("NewCountry", typeof(string));
    
            var newZipParameter = newZip.HasValue ?
                new ObjectParameter("NewZip", newZip) :
                new ObjectParameter("NewZip", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertBillingAddress", emailParameter, pwordParameter, newStreetParameter, newCityParameter, newStateParameter, newCountryParameter, newZipParameter);
        }
    
        public virtual int InsertBooks(string lName, string fName, Nullable<decimal> pword, string categoryName, string publisher_Name, Nullable<decimal> newIsbn, string newTitle, string newAuthor, Nullable<decimal> newPrice, Nullable<decimal> newQuantity, Nullable<decimal> newCopyDate, Nullable<decimal> newCost)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var publisher_NameParameter = publisher_Name != null ?
                new ObjectParameter("Publisher_Name", publisher_Name) :
                new ObjectParameter("Publisher_Name", typeof(string));
    
            var newIsbnParameter = newIsbn.HasValue ?
                new ObjectParameter("NewIsbn", newIsbn) :
                new ObjectParameter("NewIsbn", typeof(decimal));
    
            var newTitleParameter = newTitle != null ?
                new ObjectParameter("NewTitle", newTitle) :
                new ObjectParameter("NewTitle", typeof(string));
    
            var newAuthorParameter = newAuthor != null ?
                new ObjectParameter("NewAuthor", newAuthor) :
                new ObjectParameter("NewAuthor", typeof(string));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(decimal));
    
            var newCopyDateParameter = newCopyDate.HasValue ?
                new ObjectParameter("NewCopyDate", newCopyDate) :
                new ObjectParameter("NewCopyDate", typeof(decimal));
    
            var newCostParameter = newCost.HasValue ?
                new ObjectParameter("NewCost", newCost) :
                new ObjectParameter("NewCost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBooks", lNameParameter, fNameParameter, pwordParameter, categoryNameParameter, publisher_NameParameter, newIsbnParameter, newTitleParameter, newAuthorParameter, newPriceParameter, newQuantityParameter, newCopyDateParameter, newCostParameter);
        }
    
        public virtual int InsertCategory(string lName, string fName, Nullable<decimal> pword, string newCategoryName)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var newCategoryNameParameter = newCategoryName != null ?
                new ObjectParameter("NewCategoryName", newCategoryName) :
                new ObjectParameter("NewCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCategory", lNameParameter, fNameParameter, pwordParameter, newCategoryNameParameter);
        }
    
        public virtual ObjectResult<string> InsertCCARD(string email, string pword, string newCardType, Nullable<decimal> newCCardNumber, string newccardLName, string newccardFName, Nullable<decimal> newExpirationDate, Nullable<decimal> newSecurityCode)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pwordParameter = pword != null ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(string));
    
            var newCardTypeParameter = newCardType != null ?
                new ObjectParameter("NewCardType", newCardType) :
                new ObjectParameter("NewCardType", typeof(string));
    
            var newCCardNumberParameter = newCCardNumber.HasValue ?
                new ObjectParameter("NewCCardNumber", newCCardNumber) :
                new ObjectParameter("NewCCardNumber", typeof(decimal));
    
            var newccardLNameParameter = newccardLName != null ?
                new ObjectParameter("NewccardLName", newccardLName) :
                new ObjectParameter("NewccardLName", typeof(string));
    
            var newccardFNameParameter = newccardFName != null ?
                new ObjectParameter("NewccardFName", newccardFName) :
                new ObjectParameter("NewccardFName", typeof(string));
    
            var newExpirationDateParameter = newExpirationDate.HasValue ?
                new ObjectParameter("NewExpirationDate", newExpirationDate) :
                new ObjectParameter("NewExpirationDate", typeof(decimal));
    
            var newSecurityCodeParameter = newSecurityCode.HasValue ?
                new ObjectParameter("NewSecurityCode", newSecurityCode) :
                new ObjectParameter("NewSecurityCode", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertCCARD", emailParameter, pwordParameter, newCardTypeParameter, newCCardNumberParameter, newccardLNameParameter, newccardFNameParameter, newExpirationDateParameter, newSecurityCodeParameter);
        }
    
        public virtual int InsertCustomer(string newCustomersEmail, string newCustomersPword, string newCustomersLName, string newCustomersFName, string newCustomersGender, Nullable<decimal> newCustomersHPhone, Nullable<decimal> newCustomersWPhone)
        {
            var newCustomersEmailParameter = newCustomersEmail != null ?
                new ObjectParameter("NewCustomersEmail", newCustomersEmail) :
                new ObjectParameter("NewCustomersEmail", typeof(string));
    
            var newCustomersPwordParameter = newCustomersPword != null ?
                new ObjectParameter("NewCustomersPword", newCustomersPword) :
                new ObjectParameter("NewCustomersPword", typeof(string));
    
            var newCustomersLNameParameter = newCustomersLName != null ?
                new ObjectParameter("NewCustomersLName", newCustomersLName) :
                new ObjectParameter("NewCustomersLName", typeof(string));
    
            var newCustomersFNameParameter = newCustomersFName != null ?
                new ObjectParameter("NewCustomersFName", newCustomersFName) :
                new ObjectParameter("NewCustomersFName", typeof(string));
    
            var newCustomersGenderParameter = newCustomersGender != null ?
                new ObjectParameter("NewCustomersGender", newCustomersGender) :
                new ObjectParameter("NewCustomersGender", typeof(string));
    
            var newCustomersHPhoneParameter = newCustomersHPhone.HasValue ?
                new ObjectParameter("NewCustomersHPhone", newCustomersHPhone) :
                new ObjectParameter("NewCustomersHPhone", typeof(decimal));
    
            var newCustomersWPhoneParameter = newCustomersWPhone.HasValue ?
                new ObjectParameter("NewCustomersWPhone", newCustomersWPhone) :
                new ObjectParameter("NewCustomersWPhone", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomer", newCustomersEmailParameter, newCustomersPwordParameter, newCustomersLNameParameter, newCustomersFNameParameter, newCustomersGenderParameter, newCustomersHPhoneParameter, newCustomersWPhoneParameter);
        }
    
        public virtual int InsertInvoice(Nullable<int> newCart_ID)
        {
            var newCart_IDParameter = newCart_ID.HasValue ?
                new ObjectParameter("NewCart_ID", newCart_ID) :
                new ObjectParameter("NewCart_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInvoice", newCart_IDParameter);
        }
    
        public virtual int InsertP_B(string lName, string fName, Nullable<decimal> pword, string categoryName, string newPublisher_Name, Nullable<decimal> newIsbn, string newTitle, string newAuthor, Nullable<decimal> newPrice, Nullable<decimal> newQuantity)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var newPublisher_NameParameter = newPublisher_Name != null ?
                new ObjectParameter("NewPublisher_Name", newPublisher_Name) :
                new ObjectParameter("NewPublisher_Name", typeof(string));
    
            var newIsbnParameter = newIsbn.HasValue ?
                new ObjectParameter("NewIsbn", newIsbn) :
                new ObjectParameter("NewIsbn", typeof(decimal));
    
            var newTitleParameter = newTitle != null ?
                new ObjectParameter("NewTitle", newTitle) :
                new ObjectParameter("NewTitle", typeof(string));
    
            var newAuthorParameter = newAuthor != null ?
                new ObjectParameter("NewAuthor", newAuthor) :
                new ObjectParameter("NewAuthor", typeof(string));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertP_B", lNameParameter, fNameParameter, pwordParameter, categoryNameParameter, newPublisher_NameParameter, newIsbnParameter, newTitleParameter, newAuthorParameter, newPriceParameter, newQuantityParameter);
        }
    
        public virtual int InsertPubAddress(string lName, string fName, Nullable<decimal> pword, string publisher_Name, string newStreet, string newCity, string newST, string newCountry, Nullable<decimal> newZip)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var publisher_NameParameter = publisher_Name != null ?
                new ObjectParameter("Publisher_Name", publisher_Name) :
                new ObjectParameter("Publisher_Name", typeof(string));
    
            var newStreetParameter = newStreet != null ?
                new ObjectParameter("NewStreet", newStreet) :
                new ObjectParameter("NewStreet", typeof(string));
    
            var newCityParameter = newCity != null ?
                new ObjectParameter("NewCity", newCity) :
                new ObjectParameter("NewCity", typeof(string));
    
            var newSTParameter = newST != null ?
                new ObjectParameter("NewST", newST) :
                new ObjectParameter("NewST", typeof(string));
    
            var newCountryParameter = newCountry != null ?
                new ObjectParameter("NewCountry", newCountry) :
                new ObjectParameter("NewCountry", typeof(string));
    
            var newZipParameter = newZip.HasValue ?
                new ObjectParameter("NewZip", newZip) :
                new ObjectParameter("NewZip", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPubAddress", lNameParameter, fNameParameter, pwordParameter, publisher_NameParameter, newStreetParameter, newCityParameter, newSTParameter, newCountryParameter, newZipParameter);
        }
    
        public virtual int InsertPubContact(string lName, string fName, Nullable<decimal> pword, string publisher_Name, string newFName, string newLName, Nullable<decimal> newPhone, string newEmail)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var publisher_NameParameter = publisher_Name != null ?
                new ObjectParameter("Publisher_Name", publisher_Name) :
                new ObjectParameter("Publisher_Name", typeof(string));
    
            var newFNameParameter = newFName != null ?
                new ObjectParameter("NewFName", newFName) :
                new ObjectParameter("NewFName", typeof(string));
    
            var newLNameParameter = newLName != null ?
                new ObjectParameter("NewLName", newLName) :
                new ObjectParameter("NewLName", typeof(string));
    
            var newPhoneParameter = newPhone.HasValue ?
                new ObjectParameter("NewPhone", newPhone) :
                new ObjectParameter("NewPhone", typeof(decimal));
    
            var newEmailParameter = newEmail != null ?
                new ObjectParameter("NewEmail", newEmail) :
                new ObjectParameter("NewEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPubContact", lNameParameter, fNameParameter, pwordParameter, publisher_NameParameter, newFNameParameter, newLNameParameter, newPhoneParameter, newEmailParameter);
        }
    
        public virtual int InsertPublisher(string lName, string fName, Nullable<decimal> pword, string newPublisher_Name)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var newPublisher_NameParameter = newPublisher_Name != null ?
                new ObjectParameter("NewPublisher_Name", newPublisher_Name) :
                new ObjectParameter("NewPublisher_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPublisher", lNameParameter, fNameParameter, pwordParameter, newPublisher_NameParameter);
        }
    
        public virtual ObjectResult<string> InsertShippingAddress(string email, string pword, string newStreet, string newCity, string newState, string newCountry, Nullable<decimal> newZip)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var pwordParameter = pword != null ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(string));
    
            var newStreetParameter = newStreet != null ?
                new ObjectParameter("NewStreet", newStreet) :
                new ObjectParameter("NewStreet", typeof(string));
    
            var newCityParameter = newCity != null ?
                new ObjectParameter("NewCity", newCity) :
                new ObjectParameter("NewCity", typeof(string));
    
            var newStateParameter = newState != null ?
                new ObjectParameter("NewState", newState) :
                new ObjectParameter("NewState", typeof(string));
    
            var newCountryParameter = newCountry != null ?
                new ObjectParameter("NewCountry", newCountry) :
                new ObjectParameter("NewCountry", typeof(string));
    
            var newZipParameter = newZip.HasValue ?
                new ObjectParameter("NewZip", newZip) :
                new ObjectParameter("NewZip", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertShippingAddress", emailParameter, pwordParameter, newStreetParameter, newCityParameter, newStateParameter, newCountryParameter, newZipParameter);
        }
    
        public virtual int InsertShopping_Cart(Nullable<int> cID, Nullable<int> bookID, Nullable<decimal> newQuantity)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertShopping_Cart", cIDParameter, bookIDParameter, newQuantityParameter);
        }
    
        public virtual ObjectResult<Search_Result> Search(string searchType, Nullable<decimal> isbn, string title, string author, Nullable<decimal> maxPrice, string pubName, string catName)
        {
            var searchTypeParameter = searchType != null ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(string));
    
            var isbnParameter = isbn.HasValue ?
                new ObjectParameter("Isbn", isbn) :
                new ObjectParameter("Isbn", typeof(decimal));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("Author", author) :
                new ObjectParameter("Author", typeof(string));
    
            var maxPriceParameter = maxPrice.HasValue ?
                new ObjectParameter("MaxPrice", maxPrice) :
                new ObjectParameter("MaxPrice", typeof(decimal));
    
            var pubNameParameter = pubName != null ?
                new ObjectParameter("PubName", pubName) :
                new ObjectParameter("PubName", typeof(string));
    
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Search_Result>("Search", searchTypeParameter, isbnParameter, titleParameter, authorParameter, maxPriceParameter, pubNameParameter, catNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateBooks(string lName, string fName, Nullable<decimal> pword, Nullable<int> bookID, string categoryName, string publisher_Name, Nullable<decimal> newIsbn, string newTitle, string newAuthor, Nullable<decimal> newPrice, Nullable<decimal> newQuantity, Nullable<decimal> newCopyDate, Nullable<decimal> newCost)
        {
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var pwordParameter = pword.HasValue ?
                new ObjectParameter("Pword", pword) :
                new ObjectParameter("Pword", typeof(decimal));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var publisher_NameParameter = publisher_Name != null ?
                new ObjectParameter("Publisher_Name", publisher_Name) :
                new ObjectParameter("Publisher_Name", typeof(string));
    
            var newIsbnParameter = newIsbn.HasValue ?
                new ObjectParameter("NewIsbn", newIsbn) :
                new ObjectParameter("NewIsbn", typeof(decimal));
    
            var newTitleParameter = newTitle != null ?
                new ObjectParameter("NewTitle", newTitle) :
                new ObjectParameter("NewTitle", typeof(string));
    
            var newAuthorParameter = newAuthor != null ?
                new ObjectParameter("NewAuthor", newAuthor) :
                new ObjectParameter("NewAuthor", typeof(string));
    
            var newPriceParameter = newPrice.HasValue ?
                new ObjectParameter("NewPrice", newPrice) :
                new ObjectParameter("NewPrice", typeof(decimal));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(decimal));
    
            var newCopyDateParameter = newCopyDate.HasValue ?
                new ObjectParameter("NewCopyDate", newCopyDate) :
                new ObjectParameter("NewCopyDate", typeof(decimal));
    
            var newCostParameter = newCost.HasValue ?
                new ObjectParameter("NewCost", newCost) :
                new ObjectParameter("NewCost", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBooks", lNameParameter, fNameParameter, pwordParameter, bookIDParameter, categoryNameParameter, publisher_NameParameter, newIsbnParameter, newTitleParameter, newAuthorParameter, newPriceParameter, newQuantityParameter, newCopyDateParameter, newCostParameter);
        }
    
        public virtual int UpdateCustomers(Nullable<int> cID, string newCustomersEmail, string newCustomersPword, string newCustomersLName, string newCustomersFName, string newCustomersGender, Nullable<decimal> newCustomersHPhone, Nullable<decimal> newCustomersWPhone)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var newCustomersEmailParameter = newCustomersEmail != null ?
                new ObjectParameter("NewCustomersEmail", newCustomersEmail) :
                new ObjectParameter("NewCustomersEmail", typeof(string));
    
            var newCustomersPwordParameter = newCustomersPword != null ?
                new ObjectParameter("NewCustomersPword", newCustomersPword) :
                new ObjectParameter("NewCustomersPword", typeof(string));
    
            var newCustomersLNameParameter = newCustomersLName != null ?
                new ObjectParameter("NewCustomersLName", newCustomersLName) :
                new ObjectParameter("NewCustomersLName", typeof(string));
    
            var newCustomersFNameParameter = newCustomersFName != null ?
                new ObjectParameter("NewCustomersFName", newCustomersFName) :
                new ObjectParameter("NewCustomersFName", typeof(string));
    
            var newCustomersGenderParameter = newCustomersGender != null ?
                new ObjectParameter("NewCustomersGender", newCustomersGender) :
                new ObjectParameter("NewCustomersGender", typeof(string));
    
            var newCustomersHPhoneParameter = newCustomersHPhone.HasValue ?
                new ObjectParameter("NewCustomersHPhone", newCustomersHPhone) :
                new ObjectParameter("NewCustomersHPhone", typeof(decimal));
    
            var newCustomersWPhoneParameter = newCustomersWPhone.HasValue ?
                new ObjectParameter("NewCustomersWPhone", newCustomersWPhone) :
                new ObjectParameter("NewCustomersWPhone", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomers", cIDParameter, newCustomersEmailParameter, newCustomersPwordParameter, newCustomersLNameParameter, newCustomersFNameParameter, newCustomersGenderParameter, newCustomersHPhoneParameter, newCustomersWPhoneParameter);
        }
    
        public virtual int UpdateShopping_Cart(Nullable<int> cID, Nullable<int> bookID, Nullable<decimal> newQuantity)
        {
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var bookIDParameter = bookID.HasValue ?
                new ObjectParameter("BookID", bookID) :
                new ObjectParameter("BookID", typeof(int));
    
            var newQuantityParameter = newQuantity.HasValue ?
                new ObjectParameter("NewQuantity", newQuantity) :
                new ObjectParameter("NewQuantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateShopping_Cart", cIDParameter, bookIDParameter, newQuantityParameter);
        }
    }
}
